pragma solidity ^0.8.0;


contract ERA_Name_Service is ERC721A, Ownable, ReentrancyGuard {
    using Strings for uint256;
    uint256 public Cost2Character = 30000000000000000;
    uint256 public Cost3Character = 10000000000000000;
    uint256 public Cost4mCharacter = 3000000000000000;
    uint256 public royaltyBps = 500;
    string private domain='.era';
    string private BASE_URI = 'https://data.era.name/metadata/';
    string private CONTRACT_URI = 'https://data.era.name/contract.json';
    mapping(string => address) public resolveAddress;
    mapping(address => string) public primaryAddress;
    mapping(string => mapping(string => string)) public dataAddress;
    bytes _allowChars = "0123456789-_abcdefghijklmnopqrstuvwxyz";

    constructor() ERC721A("ERA Name Service", ".era") {
        tokenIDandAddress[_currentIndex]="era";
        tokenAddressandID["era"]=_currentIndex;
        resolveAddress["era"]=msg.sender;
        _safeMint(msg.sender,1);
    }
   



    
    function _baseURI() internal view virtual override returns (string memory) {
        return BASE_URI;
    }

    function contractURI() public view returns (string memory) {
        return CONTRACT_URI;
    }

    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view
    returns (address receiver, uint256 royaltyAmount) {
            TokenOwnership memory Ownership = _ownershipOf(_tokenId);
            return (Ownership.addr, _salePrice*royaltyBps/10000);
    }

    

    
    function setAddress(string calldata NAME, address newresolve) external {
         TokenOwnership memory Ownership = _ownershipOf(tokenAddressandID[NAME]);
        if (Ownership.addr != msg.sender) revert("Error");
        

    bytes memory result = bytes(primaryAddress[resolveAddress[NAME]]);
        if (keccak256(result) == keccak256(bytes(NAME))) {
            primaryAddress[resolveAddress[NAME]]="";
        }
        resolveAddress[NAME]=newresolve;
    }

    function setPrimaryAddress(string calldata NAME) external {
        TokenOwnership memory Ownership = _ownershipOf(tokenAddressandID[NAME]);
        if (Ownership.addr != msg.sender) revert("Error");
        primaryAddress[msg.sender]=NAME;
    }


    function setDataAddress(string calldata NAME,string calldata setArea, string  memory newDatas) external {
        TokenOwnership memory Ownership = _ownershipOf(tokenAddressandID[NAME]);
        if (Ownership.addr != msg.sender) revert("Error");
        dataAddress[NAME][setArea]=newDatas;
    }

    function getDataAddress(string memory NAME, string calldata Area) public view returns(string memory) {
        return dataAddress[NAME][Area];
    }


    function setBaseURI(string memory customBaseURI_) external onlyOwner {
        BASE_URI = customBaseURI_;
    }

    function setContractURI(string memory customContractURI_) external onlyOwner {
        CONTRACT_URI = customContractURI_;
    }

    function setRoyaltyBps(uint256 royaltyBps_) external onlyOwner {
        royaltyBps = royaltyBps_;
    }

    function setRegisterPrice(uint256 Character2,uint256 Character3,uint256 Character4more) external onlyOwner {
        Cost2Character = Character2;
        Cost3Character = Character3;
        Cost4mCharacter = Character4more;
    }

        function Register(string memory NAME)
        public
        payable
    {
        uint256 price = Cost4mCharacter;
        uint256 charlength=bytes(NAME).length;
        require(charlength>1,"Write a Name");
        if(charlength==2) {price=Cost2Character;} else if(charlength==3){price=Cost3Character;} else {price=Cost4mCharacter;}
        require (tokenAddressandID[NAME] == 0 , "This is already taken");
        require(msg.value >= price, "Insufficient funds!");
        tokenIDandAddress[_currentIndex]=NAME;
        tokenAddressandID[NAME]=_currentIndex;
        (bool success, ) = payable(owner()).call{value:msg.value}('');
        _safeMint(msg.sender,1);
    }




function walletOfOwnerName(address _owner)
    public
    view
    returns (string[] memory)
  {
    uint256 ownerTokenCount = balanceOf(_owner);
    string[] memory ownedTokenIds = new string[](ownerTokenCount);
    uint256 currentTokenId = 1;
    uint256 ownedTokenIndex = 0;

    while (ownedTokenIndex < ownerTokenCount) {
      address currentTokenOwner = ownerOf(currentTokenId);

      if (currentTokenOwner == _owner) {
        ownedTokenIds[ownedTokenIndex] = string.concat(tokenIDandAddress[currentTokenId],domain);

        ownedTokenIndex++;
      }

      currentTokenId++;
    }

    return ownedTokenIds;
  }


function lastAddresses(uint256 count)
    public
    view
    returns (string[] memory)
  {
    uint256 total = totalSupply();
    if(count>total){count=total;}
    string[] memory lastAddr = new string[](count);
    uint256 currentId = total - count;
    uint256 ownedTokenIndex = 0;
    require(currentId>=0,"Invalid");
    while (total > currentId) {
        lastAddr[ownedTokenIndex] = string.concat(tokenIDandAddress[total]);
        ownedTokenIndex++;
      total--;
    }

    return lastAddr;
  }

 function _checkName(string memory _name) public view returns(bool){
        uint allowedChars =0;
        bytes memory byteString = bytes(_name);
        bytes memory allowed = bytes(_allowChars);  
        for(uint i=0; i < byteString.length ; i++){
           for(uint j=0; j<allowed.length; j++){
              if(byteString[i]==allowed[j] )
              allowedChars++;         
           }
        }
        if (allowedChars==byteString.length) { return true; } else { return false; }
       
    }
    function withdraw() public onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        (bool success, ) = payable(owner()).call{value:balance}('');
        }

}
